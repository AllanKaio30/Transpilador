
# parsetab.py
# This file is automatically generated. Do not edit.
# pylint: disable=W,C,R
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = "left+-left*/ASSIGN IDENTIFIER NUMBERprogram : statement\n               | program statementstatement : IDENTIFIER ASSIGN expressionexpression : expression '+' expression\n                  | expression '-' expression\n                  | expression '*' expression\n                  | expression '/' expressionexpression : NUMBERexpression : IDENTIFIER"
    
_lr_action_items = {'IDENTIFIER':([0,1,2,4,5,6,7,8,9,10,11,12,13,14,15,16,],[3,3,-1,-2,6,-9,-3,-8,6,6,6,6,-4,-5,-6,-7,]),'$end':([1,2,4,6,7,8,13,14,15,16,],[0,-1,-2,-9,-3,-8,-4,-5,-6,-7,]),'ASSIGN':([3,],[5,]),'NUMBER':([5,9,10,11,12,],[8,8,8,8,8,]),'+':([6,7,8,13,14,15,16,],[-9,9,-8,-4,-5,-6,-7,]),'-':([6,7,8,13,14,15,16,],[-9,10,-8,-4,-5,-6,-7,]),'*':([6,7,8,13,14,15,16,],[-9,11,-8,11,11,-6,-7,]),'/':([6,7,8,13,14,15,16,],[-9,12,-8,12,12,-6,-7,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'program':([0,],[1,]),'statement':([0,1,],[2,4,]),'expression':([5,9,10,11,12,],[7,13,14,15,16,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> program","S'",1,None,None,None),
  ('program -> statement','program',1,'p_program_statements','LSC.py',53),
  ('program -> program statement','program',2,'p_program_statements','LSC.py',54),
  ('statement -> IDENTIFIER ASSIGN expression','statement',3,'p_statement_assign','LSC.py',58),
  ('expression -> expression + expression','expression',3,'p_expression_binop','LSC.py',64),
  ('expression -> expression - expression','expression',3,'p_expression_binop','LSC.py',65),
  ('expression -> expression * expression','expression',3,'p_expression_binop','LSC.py',66),
  ('expression -> expression / expression','expression',3,'p_expression_binop','LSC.py',67),
  ('expression -> NUMBER','expression',1,'p_expression_number','LSC.py',78),
  ('expression -> IDENTIFIER','expression',1,'p_expression_identifier','LSC.py',82),
]
