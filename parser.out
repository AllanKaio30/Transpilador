Created by PLY version 3.11 (http://www.dabeaz.com/ply)

Grammar

Rule 0     S' -> program
Rule 1     program -> statement
Rule 2     program -> program statement
Rule 3     statement -> IDENTIFIER ASSIGN expression
Rule 4     expression -> expression + expression
Rule 5     expression -> expression - expression
Rule 6     expression -> expression * expression
Rule 7     expression -> expression / expression
Rule 8     expression -> NUMBER
Rule 9     expression -> IDENTIFIER

Terminals, with rules where they appear

*                    : 6
+                    : 4
-                    : 5
/                    : 7
ASSIGN               : 3
IDENTIFIER           : 3 9
NUMBER               : 8
error                : 

Nonterminals, with rules where they appear

expression           : 3 4 4 5 5 6 6 7 7
program              : 2 0
statement            : 1 2

Parsing method: LALR

state 0

    (0) S' -> . program
    (1) program -> . statement
    (2) program -> . program statement
    (3) statement -> . IDENTIFIER ASSIGN expression

    IDENTIFIER      shift and go to state 3

    program                        shift and go to state 1
    statement                      shift and go to state 2

state 1

    (0) S' -> program .
    (2) program -> program . statement
    (3) statement -> . IDENTIFIER ASSIGN expression

    IDENTIFIER      shift and go to state 3

    statement                      shift and go to state 4

state 2

    (1) program -> statement .

    IDENTIFIER      reduce using rule 1 (program -> statement .)
    $end            reduce using rule 1 (program -> statement .)


state 3

    (3) statement -> IDENTIFIER . ASSIGN expression

    ASSIGN          shift and go to state 5


state 4

    (2) program -> program statement .

    IDENTIFIER      reduce using rule 2 (program -> program statement .)
    $end            reduce using rule 2 (program -> program statement .)


state 5

    (3) statement -> IDENTIFIER ASSIGN . expression
    (4) expression -> . expression + expression
    (5) expression -> . expression - expression
    (6) expression -> . expression * expression
    (7) expression -> . expression / expression
    (8) expression -> . NUMBER
    (9) expression -> . IDENTIFIER

    NUMBER          shift and go to state 8
    IDENTIFIER      shift and go to state 6

    expression                     shift and go to state 7

state 6

    (9) expression -> IDENTIFIER .

    +               reduce using rule 9 (expression -> IDENTIFIER .)
    -               reduce using rule 9 (expression -> IDENTIFIER .)
    *               reduce using rule 9 (expression -> IDENTIFIER .)
    /               reduce using rule 9 (expression -> IDENTIFIER .)
    IDENTIFIER      reduce using rule 9 (expression -> IDENTIFIER .)
    $end            reduce using rule 9 (expression -> IDENTIFIER .)


state 7

    (3) statement -> IDENTIFIER ASSIGN expression .
    (4) expression -> expression . + expression
    (5) expression -> expression . - expression
    (6) expression -> expression . * expression
    (7) expression -> expression . / expression

    IDENTIFIER      reduce using rule 3 (statement -> IDENTIFIER ASSIGN expression .)
    $end            reduce using rule 3 (statement -> IDENTIFIER ASSIGN expression .)
    +               shift and go to state 9
    -               shift and go to state 10
    *               shift and go to state 11
    /               shift and go to state 12


state 8

    (8) expression -> NUMBER .

    +               reduce using rule 8 (expression -> NUMBER .)
    -               reduce using rule 8 (expression -> NUMBER .)
    *               reduce using rule 8 (expression -> NUMBER .)
    /               reduce using rule 8 (expression -> NUMBER .)
    IDENTIFIER      reduce using rule 8 (expression -> NUMBER .)
    $end            reduce using rule 8 (expression -> NUMBER .)


state 9

    (4) expression -> expression + . expression
    (4) expression -> . expression + expression
    (5) expression -> . expression - expression
    (6) expression -> . expression * expression
    (7) expression -> . expression / expression
    (8) expression -> . NUMBER
    (9) expression -> . IDENTIFIER

    NUMBER          shift and go to state 8
    IDENTIFIER      shift and go to state 6

    expression                     shift and go to state 13

state 10

    (5) expression -> expression - . expression
    (4) expression -> . expression + expression
    (5) expression -> . expression - expression
    (6) expression -> . expression * expression
    (7) expression -> . expression / expression
    (8) expression -> . NUMBER
    (9) expression -> . IDENTIFIER

    NUMBER          shift and go to state 8
    IDENTIFIER      shift and go to state 6

    expression                     shift and go to state 14

state 11

    (6) expression -> expression * . expression
    (4) expression -> . expression + expression
    (5) expression -> . expression - expression
    (6) expression -> . expression * expression
    (7) expression -> . expression / expression
    (8) expression -> . NUMBER
    (9) expression -> . IDENTIFIER

    NUMBER          shift and go to state 8
    IDENTIFIER      shift and go to state 6

    expression                     shift and go to state 15

state 12

    (7) expression -> expression / . expression
    (4) expression -> . expression + expression
    (5) expression -> . expression - expression
    (6) expression -> . expression * expression
    (7) expression -> . expression / expression
    (8) expression -> . NUMBER
    (9) expression -> . IDENTIFIER

    NUMBER          shift and go to state 8
    IDENTIFIER      shift and go to state 6

    expression                     shift and go to state 16

state 13

    (4) expression -> expression + expression .
    (4) expression -> expression . + expression
    (5) expression -> expression . - expression
    (6) expression -> expression . * expression
    (7) expression -> expression . / expression

    +               reduce using rule 4 (expression -> expression + expression .)
    -               reduce using rule 4 (expression -> expression + expression .)
    IDENTIFIER      reduce using rule 4 (expression -> expression + expression .)
    $end            reduce using rule 4 (expression -> expression + expression .)
    *               shift and go to state 11
    /               shift and go to state 12

  ! *               [ reduce using rule 4 (expression -> expression + expression .) ]
  ! /               [ reduce using rule 4 (expression -> expression + expression .) ]
  ! +               [ shift and go to state 9 ]
  ! -               [ shift and go to state 10 ]


state 14

    (5) expression -> expression - expression .
    (4) expression -> expression . + expression
    (5) expression -> expression . - expression
    (6) expression -> expression . * expression
    (7) expression -> expression . / expression

    +               reduce using rule 5 (expression -> expression - expression .)
    -               reduce using rule 5 (expression -> expression - expression .)
    IDENTIFIER      reduce using rule 5 (expression -> expression - expression .)
    $end            reduce using rule 5 (expression -> expression - expression .)
    *               shift and go to state 11
    /               shift and go to state 12

  ! *               [ reduce using rule 5 (expression -> expression - expression .) ]
  ! /               [ reduce using rule 5 (expression -> expression - expression .) ]
  ! +               [ shift and go to state 9 ]
  ! -               [ shift and go to state 10 ]


state 15

    (6) expression -> expression * expression .
    (4) expression -> expression . + expression
    (5) expression -> expression . - expression
    (6) expression -> expression . * expression
    (7) expression -> expression . / expression

    +               reduce using rule 6 (expression -> expression * expression .)
    -               reduce using rule 6 (expression -> expression * expression .)
    *               reduce using rule 6 (expression -> expression * expression .)
    /               reduce using rule 6 (expression -> expression * expression .)
    IDENTIFIER      reduce using rule 6 (expression -> expression * expression .)
    $end            reduce using rule 6 (expression -> expression * expression .)

  ! +               [ shift and go to state 9 ]
  ! -               [ shift and go to state 10 ]
  ! *               [ shift and go to state 11 ]
  ! /               [ shift and go to state 12 ]


state 16

    (7) expression -> expression / expression .
    (4) expression -> expression . + expression
    (5) expression -> expression . - expression
    (6) expression -> expression . * expression
    (7) expression -> expression . / expression

    +               reduce using rule 7 (expression -> expression / expression .)
    -               reduce using rule 7 (expression -> expression / expression .)
    *               reduce using rule 7 (expression -> expression / expression .)
    /               reduce using rule 7 (expression -> expression / expression .)
    IDENTIFIER      reduce using rule 7 (expression -> expression / expression .)
    $end            reduce using rule 7 (expression -> expression / expression .)

  ! +               [ shift and go to state 9 ]
  ! -               [ shift and go to state 10 ]
  ! *               [ shift and go to state 11 ]
  ! /               [ shift and go to state 12 ]

